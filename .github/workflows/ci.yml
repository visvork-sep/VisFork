name: CI Pipeline

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - main
      - develop

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      # Step 1
      # Clone the repository to the CI runner
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2
      # Check cache for schema.graphql file. Use it if it exists, otherwise execute Step 3
      - name: Cache schema
        # Variable used for referring to this step in subsequent steps
        id: cache-schema
        uses: actions/cache@v4
        env: 
          cache-name: cache-schema-gql
        with:
          # Since the schema file should be located in the root directory of the project, we define this as the path
          path: ./
          # The key(s) used for finding back the cache once the cache has been generated
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('./schema.graphql') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
            ${{ runner.os }}-


      # Step 3
      # If schema.graphql has not been cached before (or the cache has expired), it will download it again
      - if: ${{ steps.cache-schema.outputs.cache-hit != 'true' }}
        name: Get resources
        run: |
          curl -o schema.graphql https://docs.github.com/public/fpt/schema.docs.graphql

      # Step 4
      - name: Build Docker image
        run: docker build -t visfork-ci -f Dockerfile.build .


  test:
    runs-on: ubuntu-latest

    steps:
      # Step 5
      - name: Run tests
        run: docker run --rm visfork-ci npm run test-slim # uses fast testing (see package.json -> scripts)

  build:
    runs-on: ubuntu-latest

    steps:
      # Step 6
      - name: Build
        run: docker run --rm visfork-ci npm run build

      # Step 7
      # This is so we can use cached files to build faster next time
      - name: Store Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/

  # deploy:
  #   runs-on: ubuntu-latest

    # push the build artifact generated in build@step7 to the VM
    # NOTE: also either run a script on the server remotely as a step here,
    # or add a trigger to the server to automatically publish the new build
