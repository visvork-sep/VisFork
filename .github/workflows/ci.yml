name: CI Pipeline

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - main
      - develop

jobs:
  setup:
    runs-on: self-hosted

    steps:
      # Step 1
      # Clone the repository to the CI runner
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2
      # Check cache for schema.graphql file. Use it if it exists, otherwise execute Step 3
      - name: Cache graphql schema
        # Variable used for referring to this step in subsequent steps
        id: cache-schema-gql
        uses: actions/cache@v4
        env: 
          cache-name: cache-schema-gql
        with:
          # Since the schema file should be located in the root directory of the project, we define this as the path
          path: ./
          # The key(s) used for finding back the cache once the cache has been generated
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('./schema.graphql') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
            ${{ runner.os }}-


      # Step 3
      # If schema.graphql has not been cached before (or the cache has expired), it will download it again
      - if: ${{ steps.cache-schema-gql.outputs.cache-hit != 'true' }}
        name: Get resources
        run: |
          curl -o schema.graphql https://docs.github.com/public/fpt/schema.docs.graphql

      # Step 4: Cache openapi schema
      # Check cache for schema.graphql file. Use it if it exists, otherwise execute Step 3
      - name: Cache openapi schema
        # Variable used for referring to this step in subsequent steps
        id: cache-schema-openapi
        uses: actions/cache@v4
        env: 
          cache-name: cache-schema-openapi
        with:
          # Since the schema file should be located in the root directory of the project, we define this as the path
          path: ./
          # The key(s) used for finding back the cache once the cache has been generated
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('./openapi-schema.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
            ${{ runner.os }}-


      # Step 5: Get openapi Resources
      # If openapi schema has not been cached before (or the cache has expired), it will download it again
      - if: ${{ steps.cache-schema-openapi.outputs.cache-hit != 'true' }}
        name: Get resources
        run: |
          curl https://raw.githubusercontent.com/github/rest-api-description/main/descriptions/api.github.com/api.github.com.2022-11-28.yaml -L -o openapi-schema.yaml

      # Step 6: Build Docker image
      - name: Build Docker image
        run: docker build -t visfork-ci -f Dockerfile.build .

      - name: Run Docker container
        run: docker run -dit --name visfork visfork-ci bash


  test-build-deploy:
    runs-on: self-hosted
    needs: setup

    steps:      
      # Run 7 inside a docker container for consistency
      - name: Run ESLint
        run: docker exec visfork npm run lint

      # Step 8
      - name: Run tests
        run: docker exec visfork npm run test 

      # Step 9
      - name: Build
        run: docker exec visfork npm run build

      - name: Deploy
        if: github.ref == 'refs/heads/main'
        run: docker cp visfork:/workspace/dist/. /var/www/html/react-app

  cleanup:
    runs-on: self-hosted
    needs: test-build-deploy

    steps:
      - name: Stop Docker Image
        run: docker stop visfork
        
      - name: Remove Docker Image
        run: docker rm visfork
