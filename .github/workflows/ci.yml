name: CI Pipeline

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - main
      - release

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      # Clone the repository to the CI runner
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Cache schema
      # Check cache for schema.graphql file. Use it if it exists, otherwise execute Step 3
      - name: Cache graphql schema
        # Variable used for referring to this step in subsequent steps
        id: cache-schema-gql
        uses: actions/cache@v4
        env: 
          cache-name: cache-schema-gql
        with:
          # Since the schema file should be located in the root directory of the project, we define this as the path
          path: ./
          # The key(s) used for finding back the cache once the cache has been generated
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('./schema.graphql') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
            ${{ runner.os }}-


      # Step 3: Get Resources
      # If schema.graphql has not been cached before (or the cache has expired), it will download it again
      - if: ${{ steps.cache-schema-gql.outputs.cache-hit != 'true' }}
        name: Get resources
        run: |
          curl -o schema.graphql https://docs.github.com/public/fpt/schema.docs.graphql

      # Step 2: Cache schema
      # Check cache for schema.graphql file. Use it if it exists, otherwise execute Step 3
      - name: Cache openapi schema
        # Variable used for referring to this step in subsequent steps
        id: cache-schema-openapi
        uses: actions/cache@v4
        env: 
          cache-name: cache-schema-openapi
        with:
          # Since the schema file should be located in the root directory of the project, we define this as the path
          path: ./
          # The key(s) used for finding back the cache once the cache has been generated
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('./openapi-schema.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
            ${{ runner.os }}-


      # Step 3: Get Resources
      # If schema.graphql has not been cached before (or the cache has expired), it will download it again
      - if: ${{ steps.cache-schema-openapi.outputs.cache-hit != 'true' }}
        name: Get resources
        run: |
          curl https://raw.githubusercontent.com/github/rest-api-description/main/descriptions/api.github.com/api.github.com.2022-11-28.yaml -L -o openapi-schema.yaml


      # Step 4: Build Docker image
      - name: Build Docker image
        run: docker build -t visfork-ci -f Dockerfile.build .

      # Step 5: Run Tests
      - name: Run tests
        run: docker run --rm visfork-ci npm run test-slim

      # Step 6: Build 
      - name: Build
        run: docker run --rm visfork-ci npm run build

      # Step 7: TODO: Store the build artifact
